# List of desired model names
desired_models = [1, 6, 12, 24, 55, 62]


# Filter dataframe based on desired model names and extract model paths
model_paths = final_val_df.iloc[desired_models]['model_path'].tolist()
print(model_paths)

state_dicts = []
for model in model_paths:
    state_dicts.append(torch.load(model)['model_state'])

alphas = [1/len(state_dicts)]* len(state_dicts)
print(alphas)
model = get_model('DeiT-S', num_classes=NUM_CLASSES)
greedy_model = souping(model, state_dicts, alphas)
greedy_model.to('cuda')

greedy_test_loss, greedy_test_acc, greedy_test_f1, greedy_test_recall, greedy_test_kappa, greedy_test_auc = val_step(greedy_model, test_loader, train_loader, loss, 'cuda', 'MultiClass')
print(greedy_test_loss, greedy_test_acc, greedy_test_f1, greedy_test_recall, greedy_test_kappa, greedy_test_auc)
# greedy_test_loss_test, greedy_test_acc_test, greedy_test_f1_test, greedy_test_recall_test, greedy_test_kappa_test, greedy_test_auc_test = val_step(greedy_model_test, test_loader, train_loader, loss, 'cuda', 'MultiClass')
# print(greedy_test_loss_test, greedy_test_acc_test, greedy_test_f1_test, greedy_test_recall_test, greedy_test_kappa_test, greedy_test_auc_test)

['/l/users/santosh.sanjeev/model_soups/runs/test/fge/HAM/DeiT-S/1.00e-05/fge-10.pt', '/l/users/santosh.sanjeev/model_soups/runs/test/fge/HAM/DeiT-S/1.00e-05/fge-25.pt', '/l/users/santosh.sanjeev/model_soups/runs/test/fge/HAM/DeiT-S/1.00e-07/fge-15.pt', '/l/users/santosh.sanjeev/model_soups/runs/test/fge/HAM/DeiT-S/5.00e-06/fge-19.pt', '/l/users/santosh.sanjeev/model_soups/runs/test/fge/HAM/DeiT-S/1.00e-07/fge-12.pt', '/l/users/santosh.sanjeev/model_soups/runs/test/fge/HAM/DeiT-S/1.00e-07/fge-19.pt']
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
100%|██████████| 12/12 [00:09<00:00,  1.30it/s]
0.5566687285900116 0.8276241987179488 0.7115766908672712 0.6668346843717242 0.7113532393615436 0


desired_models = [1, 4]


# Filter dataframe based on desired model names and extract model paths
model_paths = final_val_df.iloc[desired_models]['model_path'].tolist()
print(model_paths)

state_dicts = []
for model in model_paths:
    state_dicts.append(torch.load(model)['model_state'])

alphas = [1/len(state_dicts)]* len(state_dicts)
print(alphas)
model = get_model('DeiT-S', num_classes=NUM_CLASSES)
greedy_model = souping(model, state_dicts, alphas)
greedy_model.to('cuda')

greedy_val_loss, greedy_val_acc, greedy_val_f1, greedy_val_recall, greedy_val_kappa, greedy_val_auc = val_step(greedy_model, val_loader, train_loader, loss, 'cuda', 'MultiClass')
print(greedy_val_loss, greedy_val_acc, greedy_val_f1, greedy_val_recall, greedy_val_kappa, greedy_val_auc)
greedy_test_loss, greedy_test_acc, greedy_test_f1, greedy_test_recall, greedy_test_kappa, greedy_test_auc = val_step(greedy_model, test_loader, train_loader, loss, 'cuda', 'MultiClass')
print(greedy_test_loss, greedy_test_acc, greedy_test_f1, greedy_test_recall, greedy_test_kappa, greedy_test_auc)

# greedy_test_loss_test, greedy_test_acc_test, greedy_test_f1_test, greedy_test_recall_test, greedy_test_kappa_test, greedy_test_auc_test = val_step(greedy_model_test, test_loader, train_loader, loss, 'cuda', 'MultiClass')
# print(greedy_test_loss_test, greedy_test_acc_test, greedy_test_f1_test, greedy_test_recall_test, greedy_test_kappa_test, greedy_test_auc_test)


['/l/users/santosh.sanjeev/model_soups/runs/test/fge/HAM/DeiT-S/1.00e-05/fge-10.pt', '/l/users/santosh.sanjeev/model_soups/runs/test/fge/HAM/DeiT-S/5.00e-06/fge-18.pt']
[0.5, 0.5]
100%|██████████| 2/2 [00:03<00:00,  1.89s/it]
0.29846708476543427 0.9186899038461538 0.8938451920954572 0.8966220190958867 0.8554667998002996 0
100%|██████████| 12/12 [00:09<00:00,  1.29it/s]
0.6301182756821314 0.8214142628205128 0.706677702884827 0.6621764009001907 0.679325451033963 0
